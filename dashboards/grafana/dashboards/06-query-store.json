{
  "annotations": {
    "list": []
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "mssql",
        "uid": "${DS_MONITORINGDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 10
              },
              {
                "color": "red",
                "value": 50
              }
            ]
          },
          "unit": "short"
        }
      },
      "gridPos": {
        "h": 4,
        "w": 6,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "colorMode": "background",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "mssql",
            "uid": "${DS_MONITORINGDB}"
          },
          "format": "table",
          "rawSql": "-- Count queries with significant regressions\nWITH BaselineMetrics AS (\n  SELECT\n    qm.QueryHash,\n    AVG(qm.AvgDurationMs) AS BaselineAvgDurationMs\n  FROM dbo.QueryMetrics qm\n  INNER JOIN dbo.Servers s ON qm.ServerID = s.ServerID\n  WHERE qm.CollectionTime >= DATEADD(DAY, -7, $__timeFrom())\n    AND qm.CollectionTime < $__timeFrom()\n    AND ('$__all' IN (${ServerName:singlequote}) OR s.ServerName IN (${ServerName:singlequote}))\n    AND qm.DatabaseName NOT IN ('MonitoringDB', 'DBATools', 'master', 'model', 'msdb', 'tempdb')\n  GROUP BY qm.QueryHash\n),\nCurrentMetrics AS (\n  SELECT\n    qm.QueryHash,\n    AVG(qm.AvgDurationMs) AS CurrentAvgDurationMs\n  FROM dbo.QueryMetrics qm\n  INNER JOIN dbo.Servers s ON qm.ServerID = s.ServerID\n  WHERE qm.CollectionTime >= $__timeFrom()\n    AND qm.CollectionTime <= $__timeTo()\n    AND ('$__all' IN (${ServerName:singlequote}) OR s.ServerName IN (${ServerName:singlequote}))\n    AND qm.DatabaseName NOT IN ('MonitoringDB', 'DBATools', 'master', 'model', 'msdb', 'tempdb')\n  GROUP BY qm.QueryHash\n)\nSELECT COUNT(*) AS value\nFROM CurrentMetrics c\nINNER JOIN BaselineMetrics b ON c.QueryHash = b.QueryHash\nWHERE c.CurrentAvgDurationMs > b.BaselineAvgDurationMs * 1.5",
          "refId": "A"
        }
      ],
      "title": "Plan Regressions Detected",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "mssql",
        "uid": "${DS_MONITORINGDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "blue",
                "value": null
              }
            ]
          },
          "unit": "short"
        }
      },
      "gridPos": {
        "h": 4,
        "w": 6,
        "x": 6,
        "y": 0
      },
      "id": 2,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "mssql",
            "uid": "${DS_MONITORINGDB}"
          },
          "format": "table",
          "rawSql": "SELECT COUNT(DISTINCT qm.QueryHash) AS value\nFROM dbo.QueryMetrics qm\nINNER JOIN dbo.Servers s ON qm.ServerID = s.ServerID\nWHERE qm.CollectionTime >= $__timeFrom()\n  AND qm.CollectionTime <= $__timeTo()\n  AND ('$__all' IN (${ServerName:singlequote}) OR s.ServerName IN (${ServerName:singlequote}))\n  AND qm.DatabaseName NOT IN ('MonitoringDB', 'DBATools', 'master', 'model', 'msdb', 'tempdb')",
          "refId": "A"
        }
      ],
      "title": "Unique Queries Tracked",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "mssql",
        "uid": "${DS_MONITORINGDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 1000
              },
              {
                "color": "red",
                "value": 5000
              }
            ]
          },
          "unit": "ms"
        }
      },
      "gridPos": {
        "h": 4,
        "w": 6,
        "x": 12,
        "y": 0
      },
      "id": 3,
      "options": {
        "colorMode": "background",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "mssql",
            "uid": "${DS_MONITORINGDB}"
          },
          "format": "table",
          "rawSql": "SELECT AVG(qm.AvgDurationMs) AS value\nFROM dbo.QueryMetrics qm\nINNER JOIN dbo.Servers s ON qm.ServerID = s.ServerID\nWHERE qm.CollectionTime >= $__timeFrom()\n  AND qm.CollectionTime <= $__timeTo()\n  AND ('$__all' IN (${ServerName:singlequote}) OR s.ServerName IN (${ServerName:singlequote}))\n  AND qm.DatabaseName NOT IN ('MonitoringDB', 'DBATools', 'master', 'model', 'msdb', 'tempdb')",
          "refId": "A"
        }
      ],
      "title": "Avg Query Duration",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "mssql",
        "uid": "${DS_MONITORINGDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 500000
              },
              {
                "color": "red",
                "value": 1000000
              }
            ]
          },
          "unit": "short"
        }
      },
      "gridPos": {
        "h": 4,
        "w": 6,
        "x": 18,
        "y": 0
      },
      "id": 4,
      "options": {
        "colorMode": "background",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "mssql",
            "uid": "${DS_MONITORINGDB}"
          },
          "format": "table",
          "rawSql": "SELECT SUM(qm.ExecutionCount) AS value\nFROM dbo.QueryMetrics qm\nINNER JOIN dbo.Servers s ON qm.ServerID = s.ServerID\nWHERE qm.CollectionTime >= $__timeFrom()\n  AND qm.CollectionTime <= $__timeTo()\n  AND ('$__all' IN (${ServerName:singlequote}) OR s.ServerName IN (${ServerName:singlequote}))\n  AND qm.DatabaseName NOT IN ('MonitoringDB', 'DBATools', 'master', 'model', 'msdb', 'tempdb')",
          "refId": "A"
        }
      ],
      "title": "Total Query Executions",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "mssql",
        "uid": "${DS_MONITORINGDB}"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "AvgDurationMs"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-background"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "yellow",
                      "value": 1000
                    },
                    {
                      "color": "red",
                      "value": 5000
                    }
                  ]
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 24,
        "x": 0,
        "y": 4
      },
      "id": 5,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "AvgDurationMs"
          }
        ]
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "mssql",
            "uid": "${DS_MONITORINGDB}"
          },
          "format": "table",
          "rawSql": "SELECT TOP 20\n  s.ServerName,\n  qm.DatabaseName,\n  LEFT(qm.QueryText, 100) AS QueryText_Preview,\n  qm.ExecutionCount,\n  CAST(qm.AvgDurationMs AS DECIMAL(10,2)) AS AvgDurationMs,\n  CAST(qm.MaxDurationMs AS DECIMAL(10,2)) AS MaxDurationMs,\n  CAST(qm.AvgCPUMs AS DECIMAL(10,2)) AS AvgCPUMs,\n  CAST(qm.AvgLogicalReads AS DECIMAL(10,2)) AS AvgLogicalReads,\n  qm.CollectionTime\nFROM dbo.QueryMetrics qm\nINNER JOIN dbo.Servers s ON qm.ServerID = s.ServerID\nWHERE qm.CollectionTime >= $__timeFrom()\n  AND qm.CollectionTime <= $__timeTo()\n  AND ('$__all' IN (${ServerName:singlequote}) OR s.ServerName IN (${ServerName:singlequote}))\n  AND qm.DatabaseName NOT IN ('MonitoringDB', 'DBATools', 'master', 'model', 'msdb', 'tempdb')\nORDER BY qm.AvgDurationMs DESC",
          "refId": "A"
        }
      ],
      "title": "Top 20 Slowest Queries",
      "type": "table"
    },
    {
      "datasource": {
        "type": "mssql",
        "uid": "${DS_MONITORINGDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "tooltip": false,
              "viz": false,
              "legend": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "ms"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 14
      },
      "id": 6,
      "options": {
        "legend": {
          "calcs": [
            "mean",
            "max"
          ],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "mssql",
            "uid": "${DS_MONITORINGDB}"
          },
          "format": "time_series",
          "rawSql": "SELECT\n  qm.CollectionTime AS time,\n  qm.AvgDurationMs AS value,\n  s.ServerName + ' - ' + LEFT(qm.QueryText, 40) AS metric\nFROM dbo.QueryMetrics qm\nINNER JOIN dbo.Servers s ON qm.ServerID = s.ServerID\nWHERE qm.CollectionTime >= $__timeFrom()\n  AND qm.CollectionTime <= $__timeTo()\n  AND qm.AvgDurationMs > 100\n  AND ('$__all' IN (${ServerName:singlequote}) OR s.ServerName IN (${ServerName:singlequote}))\n  AND qm.DatabaseName NOT IN ('MonitoringDB', 'DBATools', 'master', 'model', 'msdb', 'tempdb')\nORDER BY time ASC",
          "refId": "A"
        }
      ],
      "title": "Query Duration Trends (Queries > 100ms)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "mssql",
        "uid": "${DS_MONITORINGDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "tooltip": false,
              "viz": false,
              "legend": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 14
      },
      "id": 7,
      "options": {
        "legend": {
          "calcs": [
            "mean",
            "max"
          ],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "mssql",
            "uid": "${DS_MONITORINGDB}"
          },
          "format": "time_series",
          "rawSql": "SELECT\n  qm.CollectionTime AS time,\n  qm.ExecutionCount AS value,\n  s.ServerName + ' - ' + LEFT(qm.QueryText, 40) AS metric\nFROM dbo.QueryMetrics qm\nINNER JOIN dbo.Servers s ON qm.ServerID = s.ServerID\nWHERE qm.CollectionTime >= $__timeFrom()\n  AND qm.CollectionTime <= $__timeTo()\n  AND qm.ExecutionCount > 100\n  AND ('$__all' IN (${ServerName:singlequote}) OR s.ServerName IN (${ServerName:singlequote}))\n  AND qm.DatabaseName NOT IN ('MonitoringDB', 'DBATools', 'master', 'model', 'msdb', 'tempdb')\nORDER BY time ASC",
          "refId": "A"
        }
      ],
      "title": "Query Execution Frequency (Queries > 100 executions)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "mssql",
        "uid": "${DS_MONITORINGDB}"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "CurrentAvgDurationMs"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-background"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "yellow",
                      "value": 1000
                    },
                    {
                      "color": "red",
                      "value": 5000
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "RegressionPercent"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-background"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "yellow",
                      "value": 50
                    },
                    {
                      "color": "red",
                      "value": 100
                    }
                  ]
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 24,
        "x": 0,
        "y": 22
      },
      "id": 8,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "RegressionPercent"
          }
        ]
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "mssql",
            "uid": "${DS_MONITORINGDB}"
          },
          "format": "table",
          "rawSql": "-- Plan Regressions: Queries that got slower over time\nWITH BaselineMetrics AS (\n  SELECT\n    qm.QueryHash,\n    s.ServerName,\n    qm.DatabaseName,\n    qm.QueryText,\n    AVG(qm.AvgDurationMs) AS BaselineAvgDurationMs,\n    MIN(qm.CollectionTime) AS FirstSeenTime\n  FROM dbo.QueryMetrics qm\n  INNER JOIN dbo.Servers s ON qm.ServerID = s.ServerID\n  WHERE qm.CollectionTime >= DATEADD(DAY, -7, $__timeFrom())\n    AND qm.CollectionTime < $__timeFrom()\n    AND ('$__all' IN (${ServerName:singlequote}) OR s.ServerName IN (${ServerName:singlequote}))\n    AND qm.DatabaseName NOT IN ('MonitoringDB', 'DBATools', 'master', 'model', 'msdb', 'tempdb')\n  GROUP BY qm.QueryHash, s.ServerName, qm.DatabaseName, qm.QueryText\n),\nCurrentMetrics AS (\n  SELECT\n    qm.QueryHash,\n    s.ServerName,\n    qm.DatabaseName,\n    qm.QueryText,\n    AVG(qm.AvgDurationMs) AS CurrentAvgDurationMs,\n    MAX(qm.CollectionTime) AS LastSeenTime\n  FROM dbo.QueryMetrics qm\n  INNER JOIN dbo.Servers s ON qm.ServerID = s.ServerID\n  WHERE qm.CollectionTime >= $__timeFrom()\n    AND qm.CollectionTime <= $__timeTo()\n    AND ('$__all' IN (${ServerName:singlequote}) OR s.ServerName IN (${ServerName:singlequote}))\n    AND qm.DatabaseName NOT IN ('MonitoringDB', 'DBATools', 'master', 'model', 'msdb', 'tempdb')\n  GROUP BY qm.QueryHash, s.ServerName, qm.DatabaseName, qm.QueryText\n)\nSELECT TOP 20\n  c.ServerName,\n  c.DatabaseName,\n  LEFT(c.QueryText, 100) AS QueryText_Preview,\n  CAST(b.BaselineAvgDurationMs AS DECIMAL(10,2)) AS BaselineAvgDurationMs,\n  CAST(c.CurrentAvgDurationMs AS DECIMAL(10,2)) AS CurrentAvgDurationMs,\n  CAST(((c.CurrentAvgDurationMs - b.BaselineAvgDurationMs) / b.BaselineAvgDurationMs) * 100 AS DECIMAL(10,2)) AS RegressionPercent,\n  b.FirstSeenTime,\n  c.LastSeenTime\nFROM CurrentMetrics c\nINNER JOIN BaselineMetrics b ON c.QueryHash = b.QueryHash AND c.ServerName = b.ServerName\nWHERE c.CurrentAvgDurationMs > b.BaselineAvgDurationMs * 1.5  -- At least 50% slower\nORDER BY RegressionPercent DESC",
          "refId": "A"
        }
      ],
      "title": "Plan Regressions (Queries ≥50% Slower Than Baseline)",
      "type": "table"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "gridPos": {
        "h": 12,
        "w": 24,
        "x": 0,
        "y": 32
      },
      "id": 100,
      "options": {
        "content": "# ⚡ Query Store Performance Analysis - Developer Guide\n\n## What Is Query Store?\n\n**Query Store** is SQL Server's \"flight data recorder\" for queries - it captures every query execution, plans used, and performance metrics over time. Think of it as **performance monitoring autopilot**.\n\n### Why Query Store Matters\n\n| Without Query Store | With Query Store |\n|---------------------|------------------|\n| \"Query was slow yesterday, but fast today. Why?\" | Compare execution plans before/after to find regression |\n| \"Did our deployment break performance?\" | See exact plan changes at deployment time |\n| \"Which query is causing CPU spikes?\" | Identify culprit query with historical trends |\n| \"Should I add this index?\" | A/B test plan changes and measure impact |\n\n## 📊 Dashboard Metrics Explained\n\n### Plan Regressions Detected\n**What it is**: Queries that got **≥50% slower** compared to 7-day baseline\n\n**Color coding**:\n- **Green (0-10)**: Normal variation\n- **Yellow (10-50)**: Investigate patterns\n- **Red (>50)**: Serious performance degradation\n\n**Common causes**:\n- Index dropped or disabled\n- Statistics out of date (stale estimates)\n- Parameter sniffing (wrong plan cached)\n- Server configuration changed (MAXDOP, memory)\n\n### Avg Query Duration\n**What it is**: Average execution time across all queries\n\n**Thresholds**:\n- **Green (<1000ms)**: Healthy, fast queries\n- **Yellow (1000-5000ms)**: Acceptable for complex reports\n- **Red (>5000ms)**: User-facing queries likely timing out\n\n### Total Query Executions\n**What it is**: Sum of all query runs in time window\n\n**Use case**: Correlate with application traffic\n- Spike = Traffic increase or loop bug\n- Drop = Outage or users blocked\n\n## 🎯 Common Scenarios\n\n### \"Our application got slow after deployment\"\n1. Set time range to deployment window (e.g., 2025-10-28 15:00 to 16:00)\n2. Check **Plan Regressions** table\n3. Look for queries with high **RegressionPercent** (>100% = 2x slower)\n4. Click **QueryText_Preview** to identify the query\n5. Compare **BaselineAvgDurationMs** vs **CurrentAvgDurationMs**\n6. **Root cause**:\n   - If plan changed → Recompile with `OPTION (RECOMPILE)`\n   - If statistics stale → `UPDATE STATISTICS TableName WITH FULLSCAN`\n   - If index missing → Add missing index from recommendations\n\n### \"Which query is using all the CPU?\"\n1. Open **Top 20 Slowest Queries** table\n2. Sort by **AvgCPUMs** (descending)\n3. Look for queries with high CPU but low logical reads\n   - High CPU + Low reads = CPU-bound (complex calculations, string ops)\n   - High CPU + High reads = I/O-bound (table scans, missing indexes)\n4. Click through to **Code Browser** to review query source\n5. Check for:\n   - Functions on indexed columns (kills index usage)\n   - CURSOR operations (replace with set-based logic)\n   - Excessive parallelism (tune MAXDOP)\n\n### \"Did our index help performance?\"\n1. Note time when index was added (e.g., 15:30 UTC)\n2. Split time range: Before (14:00-15:30), After (15:30-17:00)\n3. Find query in **Top 20 Slowest Queries**\n4. Compare **AvgDurationMs** before vs after\n5. Calculate improvement: `(OldDuration - NewDuration) / OldDuration * 100%`\n6. **Expected**: 50-90% improvement for good index\n7. **If no improvement**: Index not used (check execution plan)\n\n### \"Query fast in dev, slow in production\"\n**Parameter Sniffing Issue**\n\n1. Check **Query Duration Trends** chart\n2. Look for \"saw-tooth\" pattern (fast, fast, slow, fast, slow)\n3. This indicates different execution plans for same query\n4. **Root cause**: Query cached plan for parameter A (100 rows), but production uses parameter B (1 million rows)\n5. **Fix options**:\n   - `OPTION (RECOMPILE)` - Recompile every time (small overhead)\n   - `OPTION (OPTIMIZE FOR UNKNOWN)` - Generic plan (safe middle ground)\n   - `OPTION (OPTIMIZE FOR (@Param = 'typical_value'))` - Optimize for common case\n\n## 💡 Understanding the Charts\n\n### Query Duration Trends\n**Time series showing execution time over time**\n\n**Patterns to recognize**:\n- **Flat line**: Consistent performance (good!)\n- **Sudden spike**: Plan regression or lock contention\n- **Gradual climb**: Data growth, indexes need rebuilding\n- **Oscillating**: Parameter sniffing (different plans)\n\n### Query Execution Frequency\n**How often queries run over time**\n\n**What to look for**:\n- **Spikes**: Loop bug (query running in tight loop)\n- **Expected patterns**: Business hours vs off-hours\n- **Correlation**: Does high frequency correlate with slow performance?\n\n### Plan Regressions Table\n**Queries that got slower, with before/after comparison**\n\n**Key columns**:\n- **RegressionPercent**: How much slower (100% = 2x, 200% = 3x)\n- **BaselineAvgDurationMs**: Performance last week\n- **CurrentAvgDurationMs**: Performance now\n- **FirstSeenTime / LastSeenTime**: When query was captured\n\n**Action threshold**: Investigate any query >100% regression\n\n## 🔧 Optimization Workflow\n\n### Step 1: Identify Problem Query\n- Use **Top 20 Slowest Queries** or **Plan Regressions** table\n- Note **QueryText**, **DatabaseName**, **AvgDurationMs**\n\n### Step 2: Get Full Query Text\n```sql\n-- In SSMS or Azure Data Studio\nSELECT QueryText\nFROM dbo.QueryStoreSnapshots\nWHERE QueryText LIKE '%partial_text_from_dashboard%'\nORDER BY CollectionTime DESC;\n```\n\n### Step 3: Analyze Execution Plan\n- Paste query into SSMS\n- Click \"Display Estimated Execution Plan\" (Ctrl+L)\n- Look for:\n  - **Table Scans** (red!) → Add index\n  - **Key Lookups** (yellow) → Add covering index\n  - **High cost operators** (>50%) → Focus optimization here\n  - **Parallelism** (multiple threads) → May need simpler query\n  - **Missing index hints** (green) → Consider adding\n\n### Step 4: Implement Fix\nCommon fixes:\n- **Add index**: On WHERE/JOIN columns\n- **Update statistics**: `UPDATE STATISTICS TableName WITH FULLSCAN`\n- **Rewrite query**: Avoid functions on indexed columns\n- **Force recompile**: `OPTION (RECOMPILE)` or `sp_recompile`\n- **Tune parallelism**: `OPTION (MAXDOP 4)`\n\n### Step 5: Measure Impact\n- Wait 15-30 minutes for new metrics\n- Compare **AvgDurationMs** before vs after\n- Check **Query Duration Trends** for sustained improvement\n- Verify no plan regressions in other queries\n\n## ⚠️ Common Pitfalls\n\n### 1. Comparing Different Time Windows\n**Mistake**: Comparing last 7 days to last 24 hours\n**Fix**: Use same-length time windows for before/after comparison\n\n### 2. Ignoring Execution Count\n**Mistake**: Optimizing query that runs once per day\n**Fix**: Focus on high-frequency queries (ExecutionCount > 1000)\n\n### 3. Over-Indexing\n**Mistake**: Adding index for every slow query\n**Fix**: Balance read performance vs write overhead (limit 5-10 indexes per table)\n\n### 4. Not Testing in Production-Like Data\n**Mistake**: Query fast on 1000 rows (dev), slow on 10 million rows (prod)\n**Fix**: Load test with realistic data volumes\n\n## 📚 Advanced Topics\n\n### Query Store Retention\n- **Current setup**: 90 days retention\n- **Storage**: ~100MB per 1 million query executions\n- **Cleanup**: Automatic purge of oldest data when full\n\n### Forcing Query Plans\n```sql\n-- If regression detected, force \"good\" plan\nEXEC sp_query_store_force_plan @query_id = 123, @plan_id = 456;\n\n-- Revert to auto-selection\nEXEC sp_query_store_unforce_plan @query_id = 123, @plan_id = 456;\n```\n\n### Clearing Query Store\n```sql\n-- Nuclear option: Clear all Query Store data\nALTER DATABASE [YourDB] SET QUERY_STORE CLEAR ALL;\n```\n\n## 🔗 Related Dashboards\n\n- **Performance Analysis** - Stored procedure performance\n- **Code Browser** - View query source code\n- **Detailed Metrics** - Server-level performance\n- **System Overview** - Overall health check\n\n## 🆘 When to Escalate to DBA\n\n- Plan regression >200% (query 3x slower)\n- High-frequency query (>10k executions/hour) degraded >50%\n- Multiple queries regressed after same event (deployment, failover)\n- Query Store taking >500MB storage (may need purge)\n- Parameter sniffing affecting critical queries\n\n---\n*Query Store captures data every 5 minutes | 90-day retention | Plan forcing available for critical queries*",
        "mode": "markdown"
      },
      "pluginVersion": "10.2.0",
      "title": "📖 Developer Guide - Query Store Performance",
      "type": "text"
    }
  ],
  "refresh": "1m",
  "schemaVersion": 38,
  "style": "dark",
  "tags": ["query-store", "performance", "optimization"],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "MonitoringDB",
          "value": "MonitoringDB"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Datasource",
        "multi": false,
        "name": "DS_MONITORINGDB",
        "options": [],
        "query": "mssql",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "type": "datasource"
      },
      {
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "mssql",
          "uid": "${DS_MONITORINGDB}"
        },
        "definition": "SELECT ServerName FROM dbo.Servers WHERE IsActive = 1 ORDER BY ServerName",
        "hide": 0,
        "includeAll": true,
        "label": "Server",
        "multi": true,
        "name": "ServerName",
        "options": [],
        "query": "SELECT ServerName FROM dbo.Servers WHERE IsActive = 1 ORDER BY ServerName",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Query Store Performance Analysis",
  "uid": "query-store-analysis",
  "version": 1,
  "weekStart": ""
}
